@model List<eShop.ViewModel.Catalog.Catergories.CategoryVM>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Danh sách loại hàng</h1>
    <div class="card mb-4">

        <div class="card-header">
            <div class="row">
                <div class="col-md-3">
                    <button type="button" class="btn btn-outline-success" id="btnCreate" onclick="loadCreatModal()">

                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                            <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                            <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z" />
                        </svg>
                        Tạo mới
                    </button>
                </div>
                <div class="col-md-9">
                    <div class="row justify-content-between">
                        <div class="col-md-3">
                            <select class="form-select w-auto" aria-label="Default select example" name="pagesize" id="pageSizeSelect">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="15">15</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                        <div class="col-md-6 d-flex justify-content-end">
                            <div class="d-flex justify-content-end">
                                <div class="input-group">
                                    <div class="form-outline">
                                        <input type="search" id="keywordTextBox" class="form-control" />
                                    </div>
                                    <button id="search-button" type="button" class="btn btn-primary">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>

                        </div>

                    </div>

                </div>
            </div>
        </div>

        <div class="card-body" id="tableData">
            @await Component.InvokeAsync("CategoryTable", Model)
        </div>
    </div>
</div>

<!--Modal-->
<!-- Button trigger modal -->
<div id="modalHere">

</div>

<!-- Modal -->
@section Scripts{
    <script src="~/js/bootbox.min.js"></script>
    <script>
        setTimeout(function () {
            $('#msgAlert').fadeOut('slow');
        }, 2000);
    </script>
    <script>
        //create
        function loadCreatModal() {
            $(this).off('click');
            $.ajax({
                url: '@Url.Action("Create","Category")',
                success: function (data) {
                    $("#modalHere").html(data);
                    $("#exampleModal").modal('show');
                }
            });
        }
        @*function createUser() {
            if ($("#createForm").valid()) {
                var data = $("#createForm").serialize();
                console.log(data);
                //alert(data);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Create","User")',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                    data: data,
                    dataType: 'json',
                    success: function (result) {
                        /*alert(JSON.stringify(result));*/
                        if (result.isSucceed == true) {
                            $("#exampleModal").modal('hide');
                            alertForm("Tạo mới thành công");
                            setInterval(function () {
                                location.reload();
                            }, 2000);
                        }
                        else {
                            bootbox.alert(result.errors);
                        }
                    },
                    error: function () {
                        bootbox.alert('Failed to receive the Data');
                    }
                });
            }

        }*@
        //update
        function loadUpdateModal(id) {
            $.ajax({
                url: '@Url.Action("Update","Category")',
                data: {categoryId:id},
                success: function (data) {
                    $("#modalHere").html(data);
                    $("#exampleModal").modal('show');
                }
            });
        }
        @*function updateUser() {
            if ($("#updateForm").valid()) {
                var data = $("#updateForm").serialize();
        //console.log(data);
        //alert(data);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Update","User")',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                    data: data,
                    dataType: 'json',
                    async: false,
                    success: function (result) {
                        /*alert(JSON.stringify(result));*/
                        if (result.isSucceed == true) {
                            $("#exampleModal").modal('hide');

                            alertForm("Cập nhật thành công");
                            setInterval(function () {
                                location.reload(true);
                            }, 2000);
                        }
                        else {
                            bootbox.alert(result.errors);
                        }
                    },
                    error: function () {
                        alert('Failed to receive the Data');
                    }
                });
            }

        }*@
        //delete
        function deleteCategory(id) {
            $.ajax({
                url: '@Url.Action("Delete","Category")',
                method: "Post",
                data: {
                    id:id
                },
                success: function (data) {
                    if (data.isSucceed == true) {
                        alertForm("Xóa thành công");
                        setInterval(function () {
                            location.reload();
                        }, 2000);
                    }
                    else {
                        bootbox.alert(data.errors);
                    }
                },
                error: function () {
                    bootbox.alert("Xóa không thành công!");
                }
                });
        }
        function getUserPaging(keyword, pageIndex, pageSize) {
            $.ajax({
                url: '@Url.Action("GetUserPaging","User")',
                data: {
                    keyword: keyword,
                    pageIndex: pageIndex,
                    pageSize:pageSize
                },
                success: function (data) {
                    $("#tableData").html(data);
                }
            });
        }
        function alertForm(message) {
            $("#alertDiv").text(message).fadeIn("slow").delay(3000).fadeOut("slow");
        }
        //for create
        /*$('#btnCreate').on('click','#loadCreatModal',loadCreatModal());*/

        //for search
        $("#pageSizeSelect").on('change', function () {
            var pageIndex = 1;
            var pageSize = $(this).val();
            var keyword = $("#keywordTextBox").val();
            getUserPaging(keyword, pageIndex, pageSize);
        });
        $("#search-button").on('click', function () {
            var pageIndex = 1;
            var pageSize = $("#pageSizeSelect").val();
            var keyword = $("#keywordTextBox").val();
            getUserPaging(keyword, pageIndex, pageSize);
        });
        $(document).on('click', '.page-link', function () {
                var pageIndex = $(this).data("pageindex");
                var pageSize = $("#pageSizeSelect").val();
                var keyword = $("#keywordTextBox").val();
                getUserPaging(keyword, pageIndex, pageSize);
            });

        //for edit
        $(document).off('click','.btn-edit').on('click','.btn-edit', function () {
                var id = $(this).data('id');
                loadUpdateModal(id);
        });
        //for delete
        $(document).on('click', '.btn-delete', function () {
            var id = $(this).data('id');
            console.log(id);
                bootbox.confirm("Bạn chắc chắn muốn xóa?", function (result) {
                    if (result) {
                        deleteCategory(id);
                    }
                });
            });
    </script>
}


